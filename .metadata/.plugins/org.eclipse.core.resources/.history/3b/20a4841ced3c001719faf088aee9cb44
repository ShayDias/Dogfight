import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageObserver;

import javax.swing.ImageIcon;

public class Airplane{

	private Image plane;
	private boolean isP1 = true;
	private int speed = 5;
	private int[] xs, ys;
	private double[] src;
	private double[] dst = new double[8];
	private int[] xTrans, yTrans;
	private int angle;
	private Polygon hitbox;
	private int health;
	private AffineTransform transform;
	private AffineTransform t;
	private boolean flying = true, moving = true;
	private int rotation = 8;
	private int canShoot, canBomb, numBombs, respawnTimer;
	private int timeOut;
	private Sounds sounds = new Sounds();
	private boolean exploded;

	//private int bombs = 3;


	public Airplane(Image plane, boolean isP1){
		exploded = false;
		sounds.playPropellers();
		flying = true;
		timeOut = 0;
		moving = true;
		respawnTimer = 0;
		canShoot = 0;
		canBomb = 0;
		numBombs = 3;
		this.plane = plane.getScaledInstance(80, 25, 100);
		transform = new AffineTransform();
		health = 100;
		this.isP1 = isP1;
		if(isP1 == true){
			transform.translate(80, 300);
			transform.scale(-1, 1);
			xs = new int[]{0, 80, 80, 0};
			ys = new int[] {0, 0, 25, 25};

			angle = 0;
		}
		else{
			transform.translate(920, 300);
			xs = new int[]{0, 80, 80, 0};
			ys = new int[]{0, 0, 25, 25};
			angle = 180;
		}
		moveHitbox();
	}

	//Changes the speed without going over or under by too much
	public void changeSpeed(int change){
		if(speed + change <= 7 && speed + change > 3){
			speed += change;
		}
	}



	//Moves the plane based on speed
	public void move(){
		transform.translate(-(2 * speed), 0);
		moveHitbox();		
		Dogfight.panel.repaint();
	}

	public Polygon getHitbox(){
		return hitbox;
	}

	public boolean getFlying(){
		return flying;
	}

	public boolean getMoving(){
		return moving;
	}

	//Crashes the plane into the ground
	private void crash(){
		if(flying == true){
			flying = false;
			if(isP1 == false){
				this.rotate(30 - angle);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e2) {
					e2.printStackTrace();
				}
				this.rotate(60 - angle);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
				this.rotate(90 - angle);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			else{
				this.rotate(210 - angle);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e2) {
					e2.printStackTrace();
				}
				this.rotate(240 - angle);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
				this.rotate(270 - angle);
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			speed = 8;
		}
	}

	//Blows up the plane
	public void explode(){
		if(exploded == false){
			sounds.playExplosion();
		}
		exploded = true;
		plane = new ImageIcon("explosion.gif").getImage();
		plane.getScaledInstance(150, 150, 100);
		transform.setToRotation(Math.toRadians(0));
		transform.translate(hitbox.getBounds2D().getX(), hitbox.getBounds2D().getY());
		flying = false;
		moving = false;
	}

	//Changes health, crashes plane if health < 0
	public void takeHit(int healthLost){
		health -= healthLost;
		if(health <= 0){
			this.crash();
		}
	}

	public int getTimeOut(){
		return timeOut;
	}

	public void setTimeOut(int change){
		timeOut = change;
	}
	
	//Rotates the plane up by 5
	public void rotate(){
		angle += rotation;
		transform.rotate(Math.toRadians(rotation));
		moveHitbox();
		Dogfight.panel.repaint();
	}

	//Rotates the plane down by 5
	public void rotateDown(){
		angle -= rotation;
		transform.rotate(Math.toRadians(-rotation));
		moveHitbox();
		Dogfight.panel.repaint();
	}

	//Rotates the plane by a specifed amount
	public void rotate(int rotation){
		angle += rotation;
		transform.rotate(Math.toRadians(rotation));
		moveHitbox();
		Dogfight.panel.repaint();
	}

	//Launches bomb
	public void bomb(){
		canBomb++;
		if(canBomb > 10){
			if(numBombs > 0){
				canBomb = 0;
				numBombs --;
				Bomb bomb = new Bomb(hitbox.getBounds());
				Dogfight.panel.addBomb(bomb);
				sounds.playWhistle();
			}
		}
	}


	public void incCanBomb(){
		canBomb ++;
	}

	public void incCanShoot(){
		canShoot ++;
	}

	//Creates a new bullet
	public void shoot(){
		if(canShoot > 5){
			canShoot = 0;
			sounds.playSound();
		}
		if(canShoot == 0){
			Bullet bullet = new Bullet(new AffineTransform(transform), angle);
			Dogfight.panel.addBullet(bullet);
		}
	}

	public void setAngle(int angle){
		this.angle = angle;
		transform.rotate(Math.toRadians(this.angle - angle));

	}

	public void setSpeed(int speed){
		this.speed = speed;
	}

	public int getRespawnTimer(){
		return respawnTimer;
	}

	public void incRespawnTimer(){
		respawnTimer ++;
	}

	public Image getImage(){
		return plane;
	}


	public void setImage(Image image){
		plane = image;
	}

	//Returns the plane to the map if it is out
	public void returnToMap(Rectangle bounds){

		if(hitbox.getBounds().getY() < 0){
			if(isP1 == true){
				transform.translate(100, 0);
				transform.rotate(Math.toRadians(270 - angle));
				angle = 270;
			}
			else{
				transform.translate(-90, 0);
				transform.rotate(Math.toRadians(90 - angle));
				angle = 90;
			}
		}

		else if(hitbox.getBounds().getX() > bounds.getWidth()){
			transform.rotate(Math.toRadians(180));
			angle += 180;
			transform.translate(-100, 0);
		}
		else if(hitbox.getBounds().getX() < 0){
			transform.rotate(Math.toRadians(180));
			angle += 180;
			transform.translate(-100, 0);
		}


		//Hitboxes
		moveHitbox();

		//Backup in case it does not return immediately
		if(!this.hitbox.intersects(bounds)){
			timeOut += 1;
			if(timeOut >= 20){
				if(isP1 == true){
					transform.setToTranslation(80, 300);
					transform.scale(-1, 1);
					angle = 0;
				}
				else{
					transform.setToTranslation(920, 300);
					angle = 180;
				}
				timeOut = 0;
				moveHitbox();			}
		}
	}

	//Creates a new hitbox to match the plane
	private void moveHitbox(){
		src = new double[]{
				xs[0], ys[0],
				xs[1], ys[1],
				xs[2], ys[2],
				xs[3], ys[3]};
		t = new AffineTransform(transform);
		t.transform(src, 0, dst, 0, 4);
		xTrans = new int[]{(int)dst[0], (int)dst[2],(int)dst[4],(int)dst[6]};
		yTrans = new int[]{(int)dst[1], (int)dst[3],(int)dst[5],(int)dst[7]};
		hitbox = new Polygon(xTrans, yTrans, 4);
	}
	
	public int getHealth(){
		return health;
	}

	//Draws the plane
	public void draw(Graphics2D g2d, ImageObserver i){
		if(isP1 == true){
			g2d.drawImage(plane, transform, i);
		}
		else{
			g2d.drawImage(plane, transform, i);
		}
	}
}
